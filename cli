#!/usr/bin/env node
// --- SETTINGS ---
var DIST_PATH = 'dist/awsum.js';

// --- SETUP ---
var _cli = require('commander'),
    _fs = require('fs'),
    optimize=require("./bin/optimize"),
    exec=require('child_process').exec,
    _util=require("./bin/utils").util,
    path=require("path"),
    VERSION=require("./bin/config").version,
    _trace=require("./bin/trace");
    
_cli
  .version(VERSION)
  .option('-w, --watch', 'start watch file')
  .option('-m, --minify [css|js]', 'minify css or js,default is js')
  .option('-t, --type  [css|js]', 'css or js,default is js')
  .option('-l, --lint  [css|js]', 'check js or css error,default is js')
  .option('-f, --filelist [filelist]', 'js or css file list string split with ",",default is  js files list in current dir and subdir')
  .option('-c, --cssout [filename]', 'css output file name')
  .option('-j, --jsout [filename]', 'js output file name')
  .option('-o, --concatout [filename]', 'concat file name')
  .option('-g, --config [filename]', 'build all with config file')
  .option('-n, --tracename [filename]', 'trace file name')
    
// global options
_cli
    .option('--silent', 'suppress log messages.');

// commands
_cli
    .command('watch')
    .description('watch files change.')
    .action(watch);

_cli
    .command('build')
    .description('build with config file')
    .action(build);
    
_cli
    .command('concat')
    .description('Concat files.')
    .action(concat);
    
_cli
    .command('minify')
    .description('minify files.')
    .action(minify);

_cli
    .command('lint')
    .description('lint files.')
    .action(lint);
   
_cli
    .command('deploy') 
    .description('Optimize site for deploy.')
    .action(deploy);
 
_cli
    .command('purge')
    .description('Delete old files from dist folder.')
    .action(purgeDeploy);

_cli
    .command('trace')
    .description('build trace files.')
    .action(trace);
    
// parse commands
_cli.parse(process.argv);

if(process.argv.length<3){
  exec("optimize -h");
  console.log("Please use optimize -h to get help!");
}

function build(){
  var config=_cli.config||"config.json";
  fs.exists(config,function(exists){
    if(!exists){
      console.log("Config file is not found,default config file is config.json!");
      return;  
    }else{
      var _args=JSON.parse(_fs.readFileSync(config));
      _args.out=(_args.out||".");
	  fs.exists(_args.out,function(exists){
	     if(!exists){
		   _fs.mkdirSync(_args.out);
		 }
		 try{
		 //lint js & css
		  if(_args.lint.js){
			optimize.jsLint(_args.files.js,fixPath(_args.out));  
		  }
		  if(_args.lint.css){
			optimize.cssLint(_args.files.css,fixPath(_args.out));
		  }      
		  //concat css & js
		  if(_args.concat.js){
			optimize.concat(_args.files.js,fixPath(_args.out)+"concat.js",".js",_args);
		  }
		  if(_args.concat.css){
			optimize.concat(_args.files.css,fixPath(_args.out)+"concat.css",".css",_args);
		  }
		  //minify js & css
		  
		  if(_args.minify.css){
			optimize.minifyCSS(_args.files.css,fixPath(_args.out)+"minify.css",null,_args);
		  }
		  if(_args.minify.js){
			optimize.minifyJS(_args.files.js,fixPath(_args.out)+"minify.js",fixPath(_args.out),_args);
		  }
		  // concat files here or do anything that generates the dist files
		  if (! _cli.silent) {
			  console.log(' Built!');
		  } 
		}catch(e){
		  console.log(e);
		}		
	  });
    }    
  });  
} 

function watch(){
    var config=_cli.config||"config.json";
    fs.exists(config,function(exists){
      if(exists){
        var _args=JSON.parse(_fs.readFileSync(config));
        _fs.readdir(_args.out,function(err,files){
          if(err){ 
            _fs.mkdirSync(_args.out);
          }
          var dir=_util.getAllDirectory(_cli.dir||"."); 
          dir.forEach(function(d){
            if(~d.indexOf(_args.out.replace("/",""))) return ;
            optimize.watch(d,function(filename){
               _fs.readdir(_args.out,function(err,files){
                  if(err){ 
                    _fs.mkdirSync(_args.out);
                  }
                  if(!/\.min/g.test(filename)) 
                  {
                    if(_args.minify.css&&/\.css/g.test(filename)){
                      optimize.minifyCSS(_args.files.css,fixPath(_args.out)+"minify.css");
                    }
                    if(_args.minify.js&&/\.js/g.test(filename)){
                      optimize.minifyJS(_args.files.js,fixPath(_args.out)+"minify.js",fixPath(_args.out));
                    }
                  }
              });
            });  
          })
          
        });    
      }else{
        console.warn("NO config.json!It will only watch files change status!");
        var dir=_util.getAllDirectory(".");
        dir.forEach(function(d){
          optimize.watch(d);
        })
      }
    });
}


function trace(){
  if(!_cli.tracename){
    console.log("Please use -n to set name to trace!");
    return;
  }
  _trace(_cli.tracename);
}

var  con=_cli.concats,min=_cli.minify,type=_cli.type,lint=_cli.lint,
 filelist=_cli.filelist,out=_cli.out;

function fixPath(path){
  return /\/$/g.test(path)?path:path+"/";
}

function mapFilelist(outFileName){
  var dir=path.dirname(outFileName),files=_cli.filelist;
  if(files){
    return ((dir||".")+"/"+files).split(/[,|\s]/ig).join(','+(dir||".")+'/').split(",");
  } else{
    return;
  }
}

function concat(){
    var filelist,type=_cli.type,out=_cli.concatout;
    var filelist=mapFilelist(out);
    try{
		optimize.concat(filelist,out,"."+type);
	}catch(e){
	    console.log(e);
	}
}
function minify(){
    var type=_cli.type&&~["css","js"].indexOf(_cli.type)?_cli.type:"js",out=_cli[type+"out"];
    var filelist=mapFilelist(out);
	try{
		optimize["minify"+type.toUpperCase()](filelist,_cli[type+"out"]);
	}catch(e){
	    console.log(e);
	}
}

function lint(){
    var type=_cli.type&&~["css","js"].indexOf(_cli.type)?_cli.type:"js",
        files=_cli.filelist,out=_cli[type+"out"];
    var filelist=mapFilelist(out);
	try{
		optimize[type+"Lint"](filelist);
	}catch(e){
	    console.log(e);
	}
}

function deploy() {
    purgeDeploy();
    build();
}

function purgeDeploy(){
    _fs.unlinkSync(DIST_PATH);
    if (! _cli.silent) {
        console.log(' Deleted deploy files!');
    }
}

